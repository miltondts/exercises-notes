#lang scheme

; Recursive process
(define (f n)
  (if (< n 3)
      n
      (+ (f (- n 1)) (* 2 (f (- n 2))) (* 3 (f (- n 3))))))

; I'm going to evaluate the procedure in order to verify if it is truly
; a recursive process:

; Applicative order evaluation
(f 4)
(+ (f (- 4 1)) (* 2 (f (- 4 2))) (* 3 (f (- 4 3))))
(+ (f 3) (* 2 (f (- 4 2))) (* 3 (f (- 4 3))))
(+ (+ (f (- 3 1)) (* 2 (f (- 3 2))) (* 3 (f (- 3 3)))) (* 2 (f (- 4 2))) (* 3 (f (- 4 3))))
(+ (+ (f 2) (* 2 (f (- 3 2))) (* 3 (f (- 3 3)))) (* 2 (f (- 4 2))) (* 3 (f (- 4 3))))
(+ (+ 2 (* 2 (f (- 3 2))) (* 3 (f (- 3 3)))) (* 2 (f (- 4 2))) (* 3 (f (- 4 3))))
(+ (+ 2 (* 2 (f 1)) (* 3 (f (- 3 3)))) (* 2 (f (- 4 2))) (* 3 (f (- 4 3))))
(+ (+ 2 (* 2 1) (* 3 (f (- 3 3)))) (* 2 (f (- 4 2))) (* 3 (f (- 4 3))))
(+ (+ 2 2 (* 3 (f (- 3 3)))) (* 2 (f (- 4 2))) (* 3 (f (- 4 3))))
(+ (+ 2 2 (* 3 (f 0))) (* 2 (f (- 4 2))) (* 3 (f (- 4 3))))
(+ (+ 2 2 (* 3 0)) (* 2 (f (- 4 2))) (* 3 (f (- 4 3))))
(+ (+ 2 2 0) (* 2 (f (- 4 2))) (* 3 (f (- 4 3))))
(+ 4 (* 2 (f (- 4 2))) (* 3 (f (- 4 3))))
(+ 4 (* 2 (f 2)) (* 3 (f (- 4 3))))
(+ 4 (* 2 2) (* 3 (f (- 4 3))))
(+ 4 4 (* 3 (f (- 4 3))))
(+ 4 4 (* 3 (f 1)))
(+ 4 4 (* 3 1))
(+ 4 4 3)

;(+ (f (- n 1)) (* 2 (f (- n 2))) (* 3 (f (- n 3))))
; Normal order evaluation
(f 4)
(+ (f 3) (* 2 (f 2)) (* 3 (f 1)))
(+ (+ (f 2) (* 2 (f 1)) (* 3 (f 0))) (* 2 2) (* 3 1))
(+ (+ 2 (* 2 1) (* 3 0)) (* 2 2) (* 3 1))
(+ (+ 2 2 0) (* 2 2) (* 3 1))
(+ 4 (* 2 2) (* 3 1))
(+ 4 4 (* 3 1))
(+ 4 4 3)


; Iterative process
;(define (f-iter result counter)
;  (if (< counter 3)
;      result
;      (f-iter ...)))

; Tests
(define (f-test.v1 n)
  (if (< n 3)
      n
      (f-test.v1 (- n 1))))

(f-test.v1 4)
(f-test.v1 3)
(f-test.v1 2)
2

(define (f-test.v2 n)
  (if (< n 3)
      n
      (+ (f-test.v2 (- n 1)) (* 2 (f-test.v2 (- n 2))))))

(f-test.v2 4)
(+ (f-test.v2 3) (* 2 (f-test.v2 2)))
(+ (+ (f-test.v2 2) (* 2 (f-test.v2 1))) (* 2 (f-test.v2 2)))
(+ (+ 2 (* 2 1)) (* 2 2))
(+ (+ 2 2) 4)
(+ 4 4)
8







