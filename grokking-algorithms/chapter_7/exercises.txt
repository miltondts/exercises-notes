7.1
C) Cannot be calculated using the Dijkstra algorithm given it as an edge with
negative weight. The Bellman-Ford algorithm might be used but that's outside the
scope of this book

B) 
start -- 10 -- > A -- 20 -- > B -- 30 -- > finish
                 ^            |
                 |            |
                 1            1
                 |            |
                 |            v
                 ----- C  -----
                 
--------------------------------------------------------------------------------
Iteration #1

GRAPH:
 -------------------------
| start |    A    |   10  |
 -------------------------
|   A   |    B    |   20  |
 -------------------------
|       |    C    |   1   |
|   B   |---------|-------|  
|       |   fin   |   30  |
 -------------------------
|   C   |    A    |   1   |
 -------------------------
|  fin  |   ---   |  ---  |
 -------------------------
 
 COSTS:
 -----------
|  A  | 10  |
 -----------
|  B  | inf |
 -----------
|  C  | inf |
 -----------
| fin | inf |
 -----------

PARENTS:
 -----------
|  A  |start|
 -----------
|  B  | --- |
 -----------
|  C  | --- |
 -----------
| fin | --- |
 -----------
 
--------------------------------------------------------------------------------
Iteration #2
Node with lowest cost = A => cost = 10

 COSTS:
 -----------
|  A  | 10  |
 -----------
|  B  | 30  |
 -----------
|  C  | inf |
 -----------
| fin | inf |
 -----------

PARENTS:
 -----------
|  A  |start|
 -----------
|  B  |  A  |
 -----------
|  C  | --- |
 -----------
| fin | --- |
 -----------
 
--------------------------------------------------------------------------------
Iteration #3
Node with lowest cost = C => cost = 1

 COSTS:
 -----------
|  A  | 10  |
 -----------
|  B  | 30  |
 -----------
|  C  | 31  |
 -----------
| fin | 60  |
 -----------

PARENTS:
 -----------
|  A  |start|
 -----------
|  B  |  A  |
 -----------
|  C  |  B  |
 -----------
| fin |  B  |
 -----------
 
--------------------------------------------------------------------------------
Iteration #4
Node with lowest cost = A => cost = 1

 COSTS:
 -----------
|  A  | 10  |
 -----------
|  B  | 30  |
 -----------
|  C  | 31  |
 -----------
| fin | 60  |
 -----------

PARENTS:
 -----------
|  A  |start|
 -----------
|  B  |  A  |
 -----------
|  C  |  B  |
 -----------
| fin |  B  |
 -----------
 
Note: Finishes processing C here because current cost to A is bigger than the 
one stored in the COSTS tables
--------------------------------------------------------------------------------
Iteration #5
Node with lowest cost = fin => cost = 30

 COSTS:
 -----------
|  A  | 10  |
 -----------
|  B  | 30  |
 -----------
|  C  | 31  |
 -----------
| fin | 60 |
 -----------

PARENTS:
 -----------
|  A  |start|
 -----------
|  B  |  A  |
 -----------
|  C  |  B  |
 -----------
| fin |  B  |
 -----------
 
Answer:
The shortest path is fin <- B <- A <- start, and weighs 60
 
 
--------------------------------------------------------------------------------
                          
A)
start -- 5 -- > A -- 4 -- > C -- 3 -- > finish
|               ^  |        |              ^ 
|               |  |        |              | 
2               |  |        6              |
|               |  |        |              | 
|               |  |        |              | 
|               |  |        |              | 
v               |  |        |              |  
B ----------- > 8  2 ---- > |              | 
|                           v              | 
-------------- 7 -------- > D ---------- > 1


--------------------------------------------------------------------------------
Iteration #1

GRAPH:
 -------------------------
|       |    A    |   5   |
| start |---------|-------|  
|       |    B    |   2   |
 -------------------------
|       |    C    |   4   |
|   A   |---------|-------|  
|       |    D    |   2   |
 -------------------------
|       |    A    |   8   |
|   B   |---------|-------|  
|       |    D    |   7   |
 -------------------------
|       |    D    |   6   |
|   C   |---------|-------|  
|       |   fin   |   3   |
 -------------------------
|   D   |   fin   |   1   |
 -------------------------
|  fin  |   ---   |  ---  |
 -------------------------
 
 COSTS:
 -----------
|  A  |  5  |
 -----------
|  B  |  2  |
 -----------
|  C  | inf |
 -----------
|  D  | inf |
 -----------
| fin | inf |
 -----------

PARENTS:
 -----------
|  A  |start|
 -----------
|  B  |start|
 -----------
|  C  | --- |
 -----------
|  D  | --- |
 -----------
| fin | --- |
 -----------
 
--------------------------------------------------------------------------------
Iteration #2
Node with lowest cost = B => cost = 2

 COSTS:
 -----------
|  A  |  5  |
 -----------
|  B  |  2  |
 -----------
|  C  | inf |
 -----------
|  D  |  9  |
 -----------
| fin | inf |
 -----------
 
 PARENTS:
 -----------
|  A  |start|
 -----------
|  B  |start|
 -----------
|  C  | --- |
 -----------
|  D  |  B  |
 -----------
| fin | --- |
 -----------
 
--------------------------------------------------------------------------------
Iteration #3
Node with lowest cost = D => cost = 7

 COSTS:
 -----------
|  A  |  5  |
 -----------
|  B  |  2  |
 -----------
|  C  | inf |
 -----------
|  D  |  9  |
 -----------
| fin |  10 |
 -----------
 
 PARENTS:
 -----------
|  A  |start|
 -----------
|  B  |start|
 -----------
|  C  | --- |
 -----------
|  D  |  B  |
 -----------
| fin |  D  |
 -----------
 
 B has been processed!!!
 
 --------------------------------------------------------------------------------
Iteration #4
Node with lowest cost = A => cost = 5
 
 COSTS:
 -----------
|  A  |  5  |
 -----------
|  B  |  2  |
 -----------
|  C  |  6  |
 -----------
|  D  |  7  |
 -----------
| fin |  10 |
 -----------
 
 PARENTS:
 -----------
|  A  |start|
 -----------
|  B  |start|
 -----------
|  C  |  A  |
 -----------
|  D  |  A  |
 -----------
| fin |  D  |
 -----------
 
--------------------------------------------------------------------------------
Iteration #5
Node with lowest cost = D => cost = 4
 
 COSTS:
 -----------
|  A  |  5  |
 -----------
|  B  |  2  |
 -----------
|  C  |  6  |
 -----------
|  D  |  7  |
 -----------
| fin |  8  |
 -----------
 
 PARENTS:
 -----------
|  A  |start|
 -----------
|  B  |start|
 -----------
|  C  |  A  |
 -----------
|  D  |  A  |
 -----------
| fin |  D  |
 -----------
 
--------------------------------------------------------------------------------
Iteration #6
Node with lowest cost = C => cost = 2 => NO CHANGE

 COSTS:
 -----------
|  A  |  5  |
 -----------
|  B  |  2  |
 -----------
|  C  |  6  |
 -----------
|  D  |  7  |
 -----------
| fin |  8 |
 -----------
 
 PARENTS:
 -----------
|  A  |start|
 -----------
|  B  |start|
 -----------
|  C  |  A  |
 -----------
|  D  |  A  |
 -----------
| fin |  D  |
 -----------
 
Answer:
The shortest path is fin <- D <- A <- start, and weighs 8

